<?php

/**
 * The public-facing functionality of the plugin.
 * 
 * Mainly generated by the plugin boilerplate
 *
 * @link       https://github.com/swaptify
 * @since      1.0.0
 *
 * @package    Swaptify
 * @subpackage Swaptify/public
 */

/**
 * The public-facing functionality of the plugin.
 *
 * Defines the plugin name, version, and two examples hooks for how to
 * enqueue the public-facing stylesheet and JavaScript.
 *
 * @package    Swaptify
 * @subpackage Swaptify/public
 * @author     Swaptify <support@swaptify.com>
 */
class Swaptify_Public {

    /**
     * The ID of this plugin.
     *
     * @since    1.0.0
     * @access   private
     * @var      string    $plugin_name    The ID of this plugin.
     */
    private $plugin_name;

    /**
     * The version of this plugin.
     *
     * @since    1.0.0
     * @access   private
     * @var      string    $version    The current version of this plugin.
     */
    private $version;

    /**
     * Initialize the class and set its properties.
     *
     * @since    1.0.0
     * @param      string    $plugin_name       The name of the plugin.
     * @param      string    $version    The version of this plugin.
     */
    public function __construct( $plugin_name, $version ) {

        $this->plugin_name = $plugin_name;
        $this->version = $version;
        
        add_action('wp_ajax_nopriv_swaptify_visitor_type', array($this, 'set_visitor_type'));
        add_action('wp_ajax_swaptify_visitor_type', array($this, 'set_visitor_type'));
        add_action('wp_ajax_nopriv_swaptify_event', array($this, 'set_event'));
        add_action('wp_ajax_swaptify_event', array($this, 'set_event'));
        
        add_action('wp_ajax_nopriv_get_swaps', array($this, 'get_swaps'));
        add_action('wp_ajax_get_swaps', array($this, 'get_swaps'));
        
    }

    /**
     * Register the stylesheets for the public-facing side of the site.
     *
     * @since    1.0.0
     */
    public function enqueue_styles() {

        /**
         * This function is provided for demonstration purposes only.
         *
         * An instance of this class should be passed to the run() function
         * defined in Swaptify_Loader as all of the hooks are defined
         * in that particular class.
         *
         * The Swaptify_Loader will then create the relationship
         * between the defined hooks and the functions defined in this
         * class.
         */

        wp_enqueue_style( $this->plugin_name, plugin_dir_url( __FILE__ ) . 'css/swaptify-public.css', array(), $this->version, 'all' );

    }

    /**
     * Register the JavaScript for the public-facing side of the site.
     *
     * @since    1.0.0
     */
    public function enqueue_scripts() {

        /**
         * This function is provided for demonstration purposes only.
         *
         * An instance of this class should be passed to the run() function
         * defined in Swaptify_Loader as all of the hooks are defined
         * in that particular class.
         *
         * The Swaptify_Loader will then create the relationship
         * between the defined hooks and the functions defined in this
         * class.
         */
        
        wp_register_script( $this->plugin_name, plugin_dir_url( __FILE__ ) . 'js/swaptify-public.js', ['jquery'], $this->version, false );
        wp_register_script( $this->plugin_name . '-run', plugin_dir_url( __FILE__ ) . 'js/swaptify-run.js', ['jquery'], $this->version, true );
        
        wp_enqueue_script( $this->plugin_name);
        wp_enqueue_script( $this->plugin_name . '-run');
        
        wp_localize_script($this->plugin_name, 'swaptify_ajax', ['swaptify_ajax_url' => admin_url( 'admin-ajax.php')]);
        wp_localize_script($this->plugin_name, 'swaptify', ['preview' => is_preview(), 'slug_prefix' => Swaptify::$slugPrefix]);
    }
    
    /**
     * Frontend endpoint for setting visitor type via the API
     *
     * @since 1.0.0
     * 
     * @return void
     */
    public function set_visitor_type()
    {
        $success = false;
        $key = Swaptify::getVariable($_POST, 'key');
        $success = Swaptify::setVisitorType($key);
        
        if ($success)
        {
            
            $response = $success;
        }
        else {
            $response = [
                'success' => false,
            ];
        }
        
        echo(json_encode($response));
        exit(1);
    }
    
    /**
     * Frontend endpoint for recording a event met via the API
     *
     * @since 1.0.0
     * 
     * @return void
     */
    public function set_event()
    {
        $success = false;
        $key = Swaptify::getVariable($_POST, 'key');
        $success = Swaptify::setEventMet($key);
        
        $response = [
            'success' => $success,
            'type' => 'type',
            'key' => $key,
        ];
        
        echo(json_encode($response));
        exit(1);
    }
    
    /**
     * Get Swaps for a given post
     *
     * @since 1.0.0
     * 
     * @return void
     */
    public function get_swaps()
  {
    $data = false;
    $post_id = Swaptify::getVariable($_POST, 'id');
    $url = Swaptify::getVariable($_POST, 'url');

    if ($post_id)
    {
      $data = Swaptify::get($post_id, $url);
    }

    if ($data)
    {
      if ($data->swaps) {
        foreach ($data->swaps['data'] as $key => $swap) {
          if ($data->swaps['types'][$key] == 'text') {
            $data->swaps['data'][$key] = @do_shortcode($swap);
          }
        }
      }

      $response = [
        'swaps' => $data->swaps,
        'visitor_types' => $data->visitor_types,
        'post_id' => $post_id,
      ];
    }

    echo(json_encode($response));
    exit(1);
  }
}
